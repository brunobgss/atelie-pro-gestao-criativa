// api/webhooks/asaas.js - Webhook ASAAS
export default async function handler(req, res) {
  console.log('üîî Webhook ASAAS recebido:', req.method, req.url);
  
  // Configurar CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  // Responder a requisi√ß√µes OPTIONS (preflight)
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ OPTIONS request - CORS preflight');
    return res.status(200).end();
  }

  // Aceitar apenas POST para webhooks
  if (req.method !== 'POST') {
    console.error('‚ùå M√©todo n√£o permitido para webhook:', req.method);
    return res.status(405).json({ 
      error: 'M√©todo n√£o permitido. Webhooks ASAAS s√≥ aceitam POST.',
      success: false
    });
  }

  try {
    const webhookData = req.body;
    console.log('üì® Dados do webhook:', webhookData);

    // Verificar se √© um evento v√°lido do ASAAS
    if (!webhookData.event || !webhookData.payment) {
      console.error('‚ùå Dados do webhook inv√°lidos:', webhookData);
      return res.status(400).json({ 
        error: 'Dados do webhook inv√°lidos',
        success: false
      });
    }

    // Processar diferentes tipos de eventos
    switch (webhookData.event) {
      case 'PAYMENT_CREATED':
        console.log('‚úÖ Pagamento criado:', webhookData.payment.id);
        // Aqui voc√™ pode atualizar o status no seu banco de dados
        break;
      
      case 'PAYMENT_RECEIVED':
        console.log('üí∞ Pagamento recebido:', webhookData.payment.id);
        // Aqui voc√™ pode ativar a assinatura do usu√°rio
        break;
      
      case 'PAYMENT_OVERDUE':
        console.log('‚ö†Ô∏è Pagamento em atraso:', webhookData.payment.id);
        // Aqui voc√™ pode notificar o usu√°rio sobre o atraso
        break;
      
      case 'PAYMENT_DELETED':
        console.log('üóëÔ∏è Pagamento deletado:', webhookData.payment.id);
        // Aqui voc√™ pode cancelar a assinatura
        break;
      
      default:
        console.log('‚ÑπÔ∏è Evento n√£o tratado:', webhookData.event);
    }

    // Responder com sucesso para o ASAAS
    console.log('‚úÖ Webhook processado com sucesso');
    return res.status(200).json({ 
      success: true,
      message: 'Webhook processado com sucesso'
    });

  } catch (error) {
    console.error('‚ùå Erro ao processar webhook:', error);
    return res.status(500).json({ 
      success: false,
      error: 'Erro interno do servidor',
      message: error.message
    });
  }
}
