// Script para debug da edi√ß√£o de cliente
// Execute no console do navegador

console.clear();
console.log("üîç Debug da edi√ß√£o de cliente ativado!");

// 1. Monitorar todas as requisi√ß√µes de edi√ß√£o
const originalFetch = window.fetch;
window.fetch = function(...args) {
  const url = args[0];
  if (typeof url === 'string' && url.includes('customers')) {
    console.log("üåê Requisi√ß√£o para customers:", url);
    console.log("üì¶ Dados da requisi√ß√£o:", args[1]);
  }
  return originalFetch.apply(this, args);
};

// 2. Monitorar erros espec√≠ficos
const originalError = console.error;
console.error = function(...args) {
  if (args[0] && typeof args[0] === 'string' && args[0].includes('updateCustomer')) {
    console.log("üö® ERRO NA EDI√á√ÉO DE CLIENTE:", args);
  }
  originalError.apply(console, args);
};

// 3. Verificar se h√° clientes na interface
setTimeout(() => {
  const clientCards = document.querySelectorAll('[data-client-id], .client-card, [class*="client"]');
  console.log(`üìä Elementos de cliente encontrados: ${clientCards.length}`);
  
  // Verificar se h√° bot√µes de editar
  const editButtons = document.querySelectorAll('button[class*="edit"], button:has(svg)');
  console.log(`‚úèÔ∏è Bot√µes de editar encontrados: ${editButtons.length}`);
  
  if (editButtons.length > 0) {
    console.log("‚úÖ Interface carregada! Pode testar a edi√ß√£o.");
  } else {
    console.log("‚ö†Ô∏è Aguarde o carregamento da interface...");
  }
}, 3000);

// 4. Instru√ß√µes para teste
console.log("üìù Para testar:");
console.log("1. Aguarde o carregamento completo");
console.log("2. Clique no √≠cone de editar (l√°pis)");
console.log("3. Modifique o nome");
console.log("4. Clique em 'Salvar'");
console.log("5. Monitore os logs abaixo");

console.log("‚úÖ Debug ativado! Agora teste a edi√ß√£o.");
